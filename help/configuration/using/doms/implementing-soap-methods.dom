<?xml version="1.1" encoding="UTF-8" standalone="yes"?> 
<html> 
 <head> 
  <meta content="products:SG_CAMPAIGN/CLASSIC;content_type:reference" name="cq:tags" /> 
  <meta content="en_us" name="jcr:language" /> 
  <meta content="audience:configuration" name="primaryAudienceTag" /> 
  <meta content="" name="jcr:baseVersion" /> 
  <meta content="sauviat" name="contentOwner" /> 
  <meta content="true" name="jcr:isCheckedOut" /> 
  <meta content="Implementing SOAP methods" name="navTitle" /> 
  <meta content="/apps/help/templates/article-3" name="cq:template" /> 
  <meta content="3f5ccaac-27e3-4b97-8ed9-15c572702e11" name="jcr:predecessors" /> 
  <meta content="d2c5b1fd-3ab1-4f21-b0fe-593265fe5d15" name="jcr:uuid" /> 
  <meta content="mix:versionable" name="jcr:mixinTypes" /> 
  <meta content="help/components/pages/article-3" name="sling:resourceType" /> 
  <meta content="light" name="heroGradient" /> 
  <meta content="" name="seoDescription" /> 
  <meta content="" name="jcr:primaryType" /> 
  <meta content="" name="jcr:versionHistory" /> 
  <meta content="products:SG_CAMPAIGN/CLASSIC" name="primaryProductTag" /> 
  <meta content="/etc/designs/help" name="cq:designPath" /> 
  <meta content="admin" name="jcr:createdBy" /> 
  <meta content="2019-07-18" name="publishExternalDate" /> 
  <meta content="Implementing SOAP methods" name="jcr:title" /> 
  <meta content="2019-08-06T06:59:44.616-0400" name="jcr:created" /> 
  <meta content="Implementing SOAP methods" name="jcr:description" /> 
 </head> 
 <body> 
  <h2 id="introduction">Introduction</h2> 
  <p> It is possible to create SOAP methods in JavaScript. This function simply enables applicative processes, it can avoid developing JSPs and their calling in the forms.</p> 
  <p>These SOAP methods behave in the same way as those defined natively in the application. The same attributes are supported: static, key only and const.</p> 
  <h2 id="defining-a-method-library">Defining a method library</h2> 
  <p> Creating a method library involves two stages: </p> 
  <ul> 
   <li><p>The SOAP method declaration,</p> </li> 
   <li><p> Definition (or implementation) in JavaScript.</p> </li> 
  </ul> 
  <h3 id="declaration">Declaration</h3> 
  <p> Start by declaring the methods in the schemas (for more on how to create and edit schemas, refer to <a href="../../configuration/using/about-schema-edition.md">this section</a>).</p> 
  <p>Their declaration is similar to that of native methods, except that you need to add the 'library' attribute specifying the name of the method library where the definition is located. </p> 
  <p>This name coincides with the name (with the namespace) of the 'JavaScript Code' type entity. </p> 
  <p> Example: </p> 
  <p>The testLog(msg) method is declared in an nms:recipient extension </p> 
  <codeblock gutter="true" class="syntax html">
    &lt;method&amp;nbsp;name="testLog"&amp;nbsp;static="true"&amp;nbsp;library="cus:test"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;parameters&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;param&amp;nbsp;name="message"&amp;nbsp;type="string"&amp;nbsp;inout="in"/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/parameters&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/method&gt;!!discoiqbr!! 
  </codeblock> 
  <note> 
   <p> The namespace and the name used for the library are independent from the namespace and schema name where the declaration is found.<br /> </p> 
  </note> 
  <h3 id="definition">Definition</h3> 
  <p> SOAP methods are implemented in the form of JavaScript function grouped in a script representing a library. </p> 
  <note> 
   <p> A method library can group functions for various schemas or vice versa, the functions of one schema can be defined in separate libraries.<br /> </p> 
  </note> 
  <p> The script can contain code to be executed during initial library loading. </p> 
  <p><strong>1. Name</strong></p> 
  <p> The name of the function must comply with the following format:</p> 
  <codeblock gutter="true" class="syntax html">
    !!discoiqbr!!&amp;nbsp;&lt;schema-namespace&gt;_&lt;schema-name&gt;_&lt;method-name&gt;!!discoiqbr!!!!discoiqbr!! 
  </codeblock> 
  <p>Example:</p> 
  <p> The following JavaScript function is the implementation of the method described above. It shall be defined in the 'JavaScript Code' type entity using the 'cus:test' name.</p> 
  <codeblock gutter="true" class="syntax html">
    function&amp;nbsp;nms_recipient_testLog(message)!!discoiqbr!!&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;logInfo("***&amp;nbsp;"&amp;nbsp;+&amp;nbsp;message)!!discoiqbr!!&amp;nbsp;}!!discoiqbr!! 
  </codeblock> 
  <p><strong>2. Signature</strong></p> 
  <p>The function's signature must include an argument for each 'in' or 'inout' parameter of the declaration.</p> 
  <p>Specific cases:</p> 
  <ul> 
   <li><p><strong>non-static methods</strong>: the function must include an additional argument first, coinciding with the XML entity passed in the form of an 'xml' (E4X) type object.</p> </li> 
   <li><p><strong>"key only" type methods</strong>: the function must include an additional argument first, coinciding with the key passed in the form of character strings.</p> </li> 
  </ul> 
  <p><strong>3. Returned values</strong></p> 
  <p>The function must return a value for each 'out' or 'inout' type parameter. Specific case: If the method is declared without any of the 'static', 'key only' or 'const' attributes, the first returned value must coincide with the modified entity. It is possible to return a new object or to return the first modified parameter.</p> 
  <p>For example:</p> 
  <codeblock gutter="true" class="syntax html">
    function&amp;nbsp;nms_recipient_setLastName(self,&amp;nbsp;name)!!discoiqbr!!&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;self.@lastName&amp;nbsp;=&amp;nbsp;name!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;self!!discoiqbr!!&amp;nbsp;}!!discoiqbr!! 
  </codeblock> 
  <p> When several values are to be returned, they must be displayed in a table.</p> 
  <p> Example: </p> 
  <codeblock gutter="true" class="syntax html">
    function&amp;nbsp;nms_recipient_getKey(self)!!discoiqbr!!&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;[self.@firstName,&amp;nbsp;self.@lastName]!!discoiqbr!!&amp;nbsp;} 
  </codeblock> 
 </body> 
</html>