<?xml version="1.1" encoding="UTF-8" standalone="yes"?> 
<html> 
 <head> 
  <meta content="" name="jcr:primaryType" /> 
  <meta content="/apps/help/templates/article-3" name="cq:template" /> 
  <meta content="Automating via workflows" name="jcr:description" /> 
  <meta content="products:SG_CAMPAIGN/CLASSIC;content_type:reference" name="cq:tags" /> 
  <meta content="sauviat" name="contentOwner" /> 
  <meta content="Automating via workflows" name="navTitle" /> 
  <meta content="2019-07-18" name="publishExternalDate" /> 
  <meta content="light" name="heroGradient" /> 
  <meta content="mix:versionable" name="jcr:mixinTypes" /> 
  <meta content="2019-08-06T06:59:28.894-0400" name="jcr:created" /> 
  <meta content="01161e06-e8dd-4642-9ced-1362f5eee45b" name="jcr:uuid" /> 
  <meta content="" name="jcr:versionHistory" /> 
  <meta content="audience:delivery" name="primaryAudienceTag" /> 
  <meta content="9491daf7-c073-4f2f-abe6-3c4559986a36" name="jcr:predecessors" /> 
  <meta content="products:SG_CAMPAIGN/CLASSIC" name="primaryProductTag" /> 
  <meta content="en_us" name="jcr:language" /> 
  <meta content="admin" name="jcr:createdBy" /> 
  <meta content="help/components/pages/article-3" name="sling:resourceType" /> 
  <meta content="" name="seoDescription" /> 
  <meta content="" name="jcr:baseVersion" /> 
  <meta content="Automating via workflows" name="jcr:title" /> 
  <meta content="/etc/designs/help" name="cq:designPath" /> 
  <meta content="true" name="jcr:isCheckedOut" /> 
 </head> 
 <body> 
  <h2 id="content-management-activity">Content management activity</h2> 
  <p>Creating, editing, and publishing content can be automated using a workflow configured via the Adobe Campaign client interface.</p> 
  <p>The <strong>Content management</strong> activity is accessed via the <strong>Tools</strong> toolbar of the workflow diagram.</p> 
  <p>Activity properties are broken down into four steps:</p> 
  <ul> 
   <li><p><strong>Content</strong>: lets you enter existing content or create content,</p> </li> 
   <li><p><strong>Update content</strong>: lets you modify the subject of the content or update the content via an XML data flux,</p> </li> 
   <li><p><strong>Action to execute</strong>: lets you save or generate content,</p> </li> 
   <li><p><strong>Transition</strong>: lets you choose whether or not to generate an output transition and give it a name.</p> </li> 
  </ul> 
  <img alt="" captionBottom="" imageRotate="0" src="assets/d_ncs_content_wf.png" title="d_ncs_content_wf.png" /> 
  <h3 id="content">Content</h3> 
  <ul> 
   <li><p><strong>Specified by the transition</strong></p> <p>The content to be used was created previously. Processes will concern the content instance propagated by the incoming event. The content identifier is accessed via the "contentId" variable of the event.</p> </li> 
   <li><p><strong>Explicit</strong></p> <p>Lets you choose previously created content.</p> </li> 
   <li><p><strong>Calculated by a script</strong></p> <p>Selects a content instance based on a JavaScript template. The code to be evaluated lets you retrieve the content identifier.</p> </li> 
   <li><p><strong>New, created via a publication template</strong></p> <p>Creates a new content via a publication template. The content instance will be saved in the populated "String" folder.</p> </li> 
  </ul> 
  <h3 id="update-the-content">Update the content</h3> 
  <ul> 
   <li><p><strong>Subject</strong></p> <p>Lets you modify the subject of the delivery action when publishing.</p> </li> 
   <li><p><strong>Access to the data from an XML feed</strong></p> <p>The content is updated from an XML feed from an external source. A URL must be entered for data downloading to occur. </p> <p>An XSL stylesheet can be used to transform the incoming XML data.</p> </li> 
  </ul> 
  <h3 id="action-to-execute">Action to execute</h3> 
  <ul> 
   <li><p><strong>Save</strong></p> <p>Saves the created or modified content. The identifier of the saved content is propagated in the "contentId" variable of the outgoing event.</p> </li> 
   <li><p><strong>Generate</strong></p> <p>Generates the output files for each of the transformation templates with a "File" type publication. The outgoing transition is activated for each generated file, with the following parameters: the identifier of the content saved in the "contentId" variable and the filename in the "filename" variable.</p> </li> 
  </ul> 
  <h3 id="transition">Transition</h3> 
  <p>The <strong>Generate an output transition</strong> option lets you add an output transition to the <strong>Content management</strong> activity to link a new activity to workflow execution. After checking this option, enter a label for the transition.</p> 
  <h2 id="examples">Examples</h2> 
  <h3 id="automating-content-creation-and-delivery">Automating content creation and delivery</h3> 
  <p>The following example automates the creation and delivery of a content block.</p> 
  <img alt="" captionBottom="" imageRotate="0" src="assets/d_ncs_content_workflow2.png" title="d_ncs_content_workflow2.png" /> 
  <p>The content is configured via the "Content management" activity:</p> 
  <img alt="" captionBottom="" imageRotate="0" src="assets/d_ncs_content_workflow3.png" title="d_ncs_content_workflow3.png" /> 
  <p>A new content instance is created via the publication model and the content string folder. </p> 
  <p>In our example, we have overloaded the delivery subject. It will be taken into account instead of the one entered in the <strong>Delivery</strong> template. </p> 
  <p>The content is filled in automatically by an XML feed coming from the URL entered:</p> 
  <codeblock gutter="true" class="syntax html">
    &lt;?xml&amp;nbsp;version='1.0'&amp;nbsp;encoding='ISO-8859-1'?&gt;!!discoiqbr!!&lt;book&amp;nbsp;name="Content&amp;nbsp;automation&amp;nbsp;test"&amp;nbsp;date="2008/06/08"&amp;nbsp;language="eng"&amp;nbsp;computeString="Content&amp;nbsp;automation&amp;nbsp;test"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;section&amp;nbsp;id="1"&amp;nbsp;name="Introduction"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;page&gt;Introduction&amp;nbsp;to&amp;nbsp;input&amp;nbsp;forms.&lt;/page&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;/section&gt;!!discoiqbr!!&lt;/book&gt; 
  </codeblock> 
  <p>The data format does not match the data schema entered in the publication template (<strong>cus:book</strong> in our example); the <strong></strong></p> 
  <section>
    element must be replaced with the 
   <strong> 
    <chapter /></strong> element. We need to apply the "cus:book-workflow.xsl" stylesheet to make the necessary changes. 
   <p></p> 
  </section> 
  <p>Source code of the XSLT stylesheet used:</p> 
  <codeblock gutter="true" class="syntax html">
    &lt;?xml&amp;nbsp;version="1.0"&amp;nbsp;encoding="utf-8"?&gt;!!discoiqbr!!&lt;xsl:stylesheet&amp;nbsp;version="1.0"&amp;nbsp;xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;!!discoiqbr!!&amp;nbsp;&lt;xsl:output&amp;nbsp;indent="yes"&amp;nbsp;method="xml"&amp;nbsp;&amp;nbsp;encoding="ISO-8859-1"/&gt;!!discoiqbr!!!!discoiqbr!!&amp;nbsp;&lt;xsl:template&amp;nbsp;match="text()|@*"/&gt;!!discoiqbr!!!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;xsl:template&amp;nbsp;match="*"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;xsl:variable&amp;nbsp;name="element.name"&amp;nbsp;select="name(.)"/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;xsl:element&amp;nbsp;name="{$element.name}"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;xsl:copy-of&amp;nbsp;select="text()|@*"/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;xsl:apply-templates/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/xsl:element&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;/xsl:template&gt;!!discoiqbr!!!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;xsl:template&amp;nbsp;match="book"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;book&amp;nbsp;name="test"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;xsl:apply-templates/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;book&gt;!!discoiqbr!!&amp;nbsp;&lt;/xsl:template&gt;!!discoiqbr!!!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;xsl:template&amp;nbsp;match="section"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;chapter&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;xsl:for-each&amp;nbsp;select="@*"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;xsl:copy-of&amp;nbsp;select="."/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/xsl:for-each&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;xsl:apply-templates/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/chapter&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;/xsl:template&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;!!discoiqbr!!&lt;/xsl:stylesheet&gt;!!discoiqbr!! 
  </codeblock> 
  <p>The final action of the activity is to save the content instance and proceed to the next task.</p> 
  <p>Targeting is carried out via the <strong>Query</strong> activity.</p> 
  <p>An <strong>AND-join</strong> activity was added to make sure the delivery is only started once target querying and content updates are complete.</p> 
  <p>The delivery action is configured via the <strong>Delivery</strong> activity:</p> 
  <img alt="" captionBottom="" imageRotate="0" src="assets/d_ncs_content_workflow4.png" title="d_ncs_content_workflow4.png" /> 
  <p>A new delivery action is created based on a template.</p> 
  <note> 
  </note> 
  <p>The target to be delivered is entered via the incoming event.</p> 
  <p>The delivery content is populated via the incoming event.</p> 
  <p>The last step to completing the activity is to prepare and then launch the delivery. </p> 
  <h3 id="creating-content-and-publishing-it-later">Creating content and publishing it later</h3> 
  <p>This example creates a content block and launches file publication after a specific time delay.</p> 
  <img alt="" captionBottom="" imageRotate="0" src="assets/d_ncs_content_workflow5.png" title="d_ncs_content_workflow5.png" /> 
  <p>The first <strong>Content management</strong> task creates a content instance.</p> 
  <img alt="" captionBottom="" imageRotate="0" src="assets/d_ncs_content_workflow6.png" title="d_ncs_content_workflow6.png" /> 
  <note> 
   <p> The <strong>Publication</strong> tab of the transformation templates window must be populated with the location of the target to be generated. <br /> </p> 
  </note> 
  <p>A waiting activity is added to pause the next transition for a week. </p> 
  <img alt="" captionBottom="" imageRotate="0" src="assets/d_ncs_content_workflow7.png" title="d_ncs_content_workflow7.png" /> 
  <p>Content is entered manually during this time period.</p> 
  <p>The next task launches content generation.</p> 
  <img alt="" captionBottom="" imageRotate="0" src="assets/d_ncs_content_workflow8.png" title="d_ncs_content_workflow8.png" /> 
  <p>The content to be published is entered via the incoming transition.</p> 
  <p>The final action is to generate this content by forcing the publication directory.</p> 
  <p>The <strong>JavaScript Code</strong> activity retrieves the full name of each generated file.</p> 
  <img alt="" captionBottom="" imageRotate="0" src="assets/d_ncs_content_workflow9.png" title="d_ncs_content_workflow9.png" /> 
  <h3 id="creating-the-delivery-and-its-content">Creating the delivery and its content</h3> 
  <p>This example uses the same concept as the first example, only it creates the delivery action in the first step.</p> 
  <img alt="" captionBottom="" imageRotate="0" src="assets/d_ncs_content_workflow10.png" title="d_ncs_content_workflow10.png" /> 
  <p>The first <strong>Create delivery</strong> task creates the delivery action.</p> 
  <p>The fork activity lets you launch target calculation and the creation of the content instance at the same time.</p> 
  <p>Once the tasks have been executed, the AND-join box activates the <strong>Delivery</strong> task to launch the previously created delivery on content and targeting.</p> 
  <img alt="" captionBottom="" imageRotate="0" src="assets/d_ncs_content_workflow11.png" title="d_ncs_content_workflow11.png" /> 
  <p>The delivery action to be started is populated via the transition.</p> 
  <p>The target to be delivered is entered via the incoming event.</p> 
  <p>The delivery content is populated via the incoming event.</p> 
  <p>The final action of the activity is to prepare and launch the delivery. </p> 
  <h3 id="importing-content-from-ftp">Importing content from FTP</h3> 
  <p>If your delivery content is available in an HTML file located on FTP or SFTP servers, you can easily load this content into Adobe Campaign deliveries. Refer to <a href="../../workflow/using/loading-delivery-content.md">this example</a>.</p> 
  <h3 id="importing-content-from-amazon-simple-storage-service--s3--connector">Importing content from Amazon Simple Storage Service (S3) connector</h3> 
  <p>If your delivery content is located on Amazon Simple Storage Service (S3) buckets, you can easily load this content into Adobe Campaign deliveries. Refer to <a href="../../workflow/using/loading-delivery-content.md">this example</a>.</p> 
  <h2 id="semi-automatic-update">Semi-automatic update</h2> 
  <p>Content data can be updated in "semi-automatic" mode. The data is recovered from an XML feed via a URL.</p> 
  <p>The activation of data recovery is performed manually via the input form.</p> 
  <p>The aim is to declare an <strong>editBtn</strong> type <strong><input /></strong> field in the form. This control comprises an edit zone and a button to launch processing. </p> 
  <p>The edit zone lets you populate variable data used to construct the URL of the XML feed of data to be retrieved. </p> 
  <p>The button executes the <strong>GetAndTransform</strong> SOAP method populated under the <strong><input /></strong> tag.</p> 
  <p>Control declaration in the form is as follows:</p> 
  <codeblock gutter="true" class="syntax html">
    &lt;input&amp;nbsp;type="editbtn"&amp;nbsp;xpath="&lt;path&gt;"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;enter&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;soapCall&amp;nbsp;name="GetAndTransform"&amp;nbsp;service="ncm:content"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;param&amp;nbsp;exprIn="&lt;url&gt;"&amp;nbsp;type="string"/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;param&amp;nbsp;exprIn="'xtk:xslt|&lt;style&amp;nbsp;sheet&gt;'"&amp;nbsp;type="string"/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;param&amp;nbsp;type="DOMElement"&amp;nbsp;xpathOut="&lt;output&amp;nbsp;path&gt;"/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/soapCall&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;/enter&gt;!!discoiqbr!!&lt;/input&gt; 
  </codeblock> 
  <p>The <strong>GetAndTransform</strong> method must be declared under the <strong> 
    <enter /></strong> element of the <strong><input /></strong> tag. This tag takes as parameters the URL of recovery of XML data from an expression constructed dynamically. The second parameter of the function is optional, and references a stylesheet used for an intermediate transformation when the incoming XML data is not in the same format as the content. </p> 
  <p>The output updates the content based on the path entered in the last parameter.</p> 
  <p><strong>Example</strong>: To illustrate this example, we start from the "cus:book" schema.</p> 
  <p>A semi-automatic update edit control input form is added:</p> 
  <img alt="" captionBottom="" imageRotate="0" src="assets/d_ncs_content_exemple9.png" title="d_ncs_content_exemple9.png" /> 
  <codeblock gutter="true" class="syntax html">
    &lt;input&amp;nbsp;label="File&amp;nbsp;name"&amp;nbsp;type="editbtn"&amp;nbsp;xpath="/tmp/@name"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;enter&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;soapCall&amp;nbsp;name="GetAndTransform"&amp;nbsp;service="ncm:content"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;param&amp;nbsp;exprIn="'https://server/incoming/'&amp;nbsp;+&amp;nbsp;[/tmp/@name]&amp;nbsp;+&amp;nbsp;'.xml'"&amp;nbsp;type="string"/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;param&amp;nbsp;exprIn="'xtk:xslt|cus:book-workflow.xsl'"&amp;nbsp;type="string"/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;param&amp;nbsp;type="DOMElement"&amp;nbsp;xpathOut="."/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/soapCall&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;/enter&gt;!!discoiqbr!!&lt;/input&gt; 
  </codeblock> 
  <p>The edit zone lets you enter the name of the file to be retrieved. The URL is constructed based on this name, for example: https://server/incomin/data.xml</p> 
  <p>The format of the data to be retrieved is the same as in example 1 of workflow automation. We shall use the "cus:book-workflow.xsl" stylesheet seen in this example.</p> 
  <p>The result of job execution updates the content instance from the path '.'.</p> 
 </body> 
</html>