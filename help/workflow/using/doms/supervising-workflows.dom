<?xml version="1.1" encoding="UTF-8" standalone="yes"?> 
<html> 
 <head> 
  <meta content="Supervising workflows" name="jcr:description" /> 
  <meta content="53b57494-1dc2-4662-85f7-02c3770fbbf9" name="jcr:predecessors" /> 
  <meta content="/etc/designs/help" name="cq:designPath" /> 
  <meta content="products:SG_CAMPAIGN/CLASSIC" name="primaryProductTag" /> 
  <meta content="en_us" name="jcr:language" /> 
  <meta content="mix:versionable" name="jcr:mixinTypes" /> 
  <meta content="2019-08-06T06:59:17.339-0400" name="jcr:created" /> 
  <meta content="" name="jcr:versionHistory" /> 
  <meta content="audience:workflow" name="primaryAudienceTag" /> 
  <meta content="" name="jcr:baseVersion" /> 
  <meta content="" name="seoDescription" /> 
  <meta content="products:SG_CAMPAIGN/CLASSIC;content_type:reference" name="cq:tags" /> 
  <meta content="2019-07-18" name="publishExternalDate" /> 
  <meta content="admin" name="jcr:createdBy" /> 
  <meta content="sauviat" name="contentOwner" /> 
  <meta content="/apps/help/templates/article-3" name="cq:template" /> 
  <meta content="light" name="heroGradient" /> 
  <meta content="bb1116e8-ff8d-44b8-8946-9dac5acb821a" name="jcr:uuid" /> 
  <meta content="Supervising workflows" name="navTitle" /> 
  <meta content="Supervising workflows" name="jcr:title" /> 
  <meta content="help/components/pages/article-3" name="sling:resourceType" /> 
  <meta content="true" name="jcr:isCheckedOut" /> 
  <meta content="" name="jcr:primaryType" /> 
 </head> 
 <body> 
  <p>This use case details the creation of a workflow that lets you monitor the status of a set of workflows that are "paused", "stopped" or "with errors".</p> 
  <p>Its purpose is to:</p> 
  <ul> 
   <li><p>Use a workflow to monitor a group of business workflows.</p> </li> 
   <li><p>Send a message to a supervisor via a "delivery" activity.</p> </li> 
  </ul> 
  <p>To monitor the status of a set of workflows, you need to follow these steps: </p> 
  <ol> 
   <li><p>Create the monitoring workflow.</p> </li> 
   <li><p>Write the JavaScript to determine whether workflows are paused, stopped, or with errors.</p> </li> 
   <li><p>Create the <strong>Test</strong> activity.</p> </li> 
   <li><p>Prepare the delivery template.</p> </li> 
  </ol> 
  <note> 
   <p> In addition to the workflow, Campaign <strong>Workflow Heatmap</strong> allows you to analyse in details the workflows that are currently running. For more on this, refer to the <a href="../../production/using/monitoring-processes.md#workflow-monitoring">dedicated section</a>.<br /> </p> 
  </note> 
  <h2 id="step-1--creating-the-monitoring-workflow">Step 1: Creating the monitoring workflow</h2> 
  <p>The workflow folder that we are going to monitor is the <strong>"CustomWorkflows"</strong> folder stored in the <strong>Administration &gt; Production &gt; Technical workflows</strong> node. This folder contains a set of business workflows.</p> 
  <p>The <strong>Monitoring workflow</strong> is stored at the root of the Technical Workflows folder. The label used is <strong>"Monitoring"</strong>.</p> 
  <p>The following schema shows the sequence of activities:</p> 
  <img alt="" captionBottom="" imageRotate="0" src="assets/uc_monitoring_workflow_overview.png" title="UC_monitoring_workflow_overview.png" /> 
  <p>This workflow is made up of:</p> 
  <ul> 
   <li><p>a <strong>"Start"</strong> activity.</p> </li> 
   <li><p>a <strong>"JavaScript code"</strong> activity responsible for analyzing the business workflows folder.</p> </li> 
   <li><p>a <strong>"Test"</strong> activity to send a delivery to the supervisor or re-start the workflow.</p> </li> 
   <li><p>a <strong>"Delivery"</strong> activity responsible for message layout.</p> </li> 
   <li><p>a <strong>"Wait"</strong> activity that controls the lead times between workflow iterations.</p> </li> 
  </ul> 
  <h2 id="step-2--writing-the-javascript">Step 2: Writing the JavaScript</h2> 
  <p>The first part of the JavaScript code coincides with a <strong>query (queryDef)</strong> that lets you identify the workflows with a "pause" (@state == 13), "error" (@failed == 1) or "stopped" (@state == 20) status.</p> 
  <p>The <strong>internal name</strong> of the workflow folder to monitor is given in the following condition:</p> 
  <codeblock gutter="true" class="syntax html">
    !!discoiqbr!!&lt;condition&amp;nbsp;boolOperator="AND"&amp;nbsp;expr="[folder/@name]&amp;nbsp;=&amp;nbsp;'Folder20'"&amp;nbsp;internalId="1"/&gt;!!discoiqbr!!&amp;nbsp; 
  </codeblock> 
  <codeblock gutter="true" class="syntax html">
    !!discoiqbr!!var&amp;nbsp;strError&amp;nbsp;=&amp;nbsp;"";!!discoiqbr!!var&amp;nbsp;strPaused&amp;nbsp;=&amp;nbsp;"";!!discoiqbr!!var&amp;nbsp;strStop&amp;nbsp;=&amp;nbsp;"";!!discoiqbr!!!!discoiqbr!!var&amp;nbsp;queryWkfError&amp;nbsp;=&amp;nbsp;xtk.queryDef.create(!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;queryDef&amp;nbsp;schema="xtk:workflow"&amp;nbsp;operation="select"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;select&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;node&amp;nbsp;expr="@internalName"/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;node&amp;nbsp;expr="@state"/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;node&amp;nbsp;expr="@label"/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;node&amp;nbsp;expr="@failed"/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;node&amp;nbsp;expr="@state"/&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/select&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;where&amp;nbsp;id="12837805386"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;condition&amp;nbsp;boolOperator="AND"&amp;nbsp;expr="[folder/@name]&amp;nbsp;=&amp;nbsp;'Folder20'"&amp;nbsp;internalId="1"/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;condition&amp;nbsp;boolOperator="AND"&amp;nbsp;internalId="2"&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;condition&amp;nbsp;boolOperator="OR"&amp;nbsp;expr="@state&amp;nbsp;=&amp;nbsp;20"&amp;nbsp;internalId="3"/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;condition&amp;nbsp;expr="@state&amp;nbsp;=&amp;nbsp;13"&amp;nbsp;internalId="4"/&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/condition&gt;&amp;nbsp;&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/where&gt;!!discoiqbr!!&amp;nbsp;&amp;nbsp;&lt;/queryDef&gt;!!discoiqbr!!);!!discoiqbr!!var&amp;nbsp;ndWkfError&amp;nbsp;=&amp;nbsp;queryWkfError.ExecuteQuery();&amp;nbsp;!!discoiqbr!!&amp;nbsp; 
  </codeblock> 
  <p>The second part of the JavaScript code lets you <strong>display a message for each workflow</strong> based on the status recovered during the query.</p> 
  <note> 
   <p> The strings created must be loaded in the workflow's event variables.<br /> </p> 
  </note> 
  <codeblock gutter="true" class="syntax html">
    !!discoiqbr!!for&amp;nbsp;each&amp;nbsp;(&amp;nbsp;var&amp;nbsp;wkf&amp;nbsp;in&amp;nbsp;ndWkfError.workflow&amp;nbsp;)&amp;nbsp;!!discoiqbr!!{!!discoiqbr!!&amp;nbsp;&amp;nbsp;if&amp;nbsp;(&amp;nbsp;wkf.@state&amp;nbsp;==&amp;nbsp;13&amp;nbsp;)&amp;nbsp;&amp;nbsp;//&amp;nbsp;Status&amp;nbsp;13&amp;nbsp;=&amp;nbsp;paused!!discoiqbr!!&amp;nbsp;&amp;nbsp;{!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(&amp;nbsp;wkf.@failed&amp;nbsp;==&amp;nbsp;1&amp;nbsp;)!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;strError&amp;nbsp;+=&amp;nbsp;"&lt;li&gt;Workflow&amp;nbsp;'"&amp;nbsp;+&amp;nbsp;wkf.@internalName&amp;nbsp;+&amp;nbsp;"'&amp;nbsp;with&amp;nbsp;the&amp;nbsp;label&amp;nbsp;'"&amp;nbsp;+&amp;nbsp;wkf.@label&amp;nbsp;+&amp;nbsp;"'&lt;/li&gt;";!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;strPaused&amp;nbsp;+=&amp;nbsp;"&lt;li&gt;Workflow&amp;nbsp;'"&amp;nbsp;+&amp;nbsp;wkf.@internalName&amp;nbsp;+&amp;nbsp;"'&amp;nbsp;with&amp;nbsp;the&amp;nbsp;label&amp;nbsp;'"&amp;nbsp;+&amp;nbsp;wkf.@label&amp;nbsp;+&amp;nbsp;"'&lt;/li&gt;";!!discoiqbr!!&amp;nbsp;&amp;nbsp;}!!discoiqbr!!&amp;nbsp;&amp;nbsp;!!discoiqbr!!&amp;nbsp;&amp;nbsp;if&amp;nbsp;(&amp;nbsp;wkf.@state&amp;nbsp;==&amp;nbsp;20&amp;nbsp;)&amp;nbsp;&amp;nbsp;//&amp;nbsp;Status&amp;nbsp;20&amp;nbsp;=&amp;nbsp;stop!!discoiqbr!!&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;strStop&amp;nbsp;+=&amp;nbsp;"&lt;li&gt;Workflow&amp;nbsp;'"&amp;nbsp;+&amp;nbsp;wkf.@internalName&amp;nbsp;+&amp;nbsp;"'&amp;nbsp;with&amp;nbsp;the&amp;nbsp;label&amp;nbsp;'"&amp;nbsp;+&amp;nbsp;wkf.@label&amp;nbsp;+&amp;nbsp;"'&lt;/li&gt;";!!discoiqbr!!}!!discoiqbr!!!!discoiqbr!!vars.strWorkflowError&amp;nbsp;=&amp;nbsp;strError;!!discoiqbr!!vars.strWorkflowPaused&amp;nbsp;=&amp;nbsp;strPaused;!!discoiqbr!!vars.strWorkflowStop&amp;nbsp;=&amp;nbsp;strStop;!!discoiqbr!!!!discoiqbr!! 
  </codeblock> 
  <h2 id="step-3--creating-the--test--activity">Step 3: Creating the 'Test' activity</h2> 
  <p>The "Test" activity lets you determine whether a delivery needs to be sent or whether the monitoring workflow needs to run another cycle based on the "Wait" activity.</p> 
  <p>A delivery is sent to the supervisor <strong>if at least one of the three event variables "vars.strWorkflowError", "vars.strWorkflowPaused", or "vars.strWorkflowStop" is non-void.</strong></p> 
  <img alt="" captionBottom="" imageRotate="0" src="assets/uc_monitoring_workflow_test.png" title="UC_monitoring_workflow_test.png" /> 
  <p>The "Wait" activity can be configured to re-start the monitoring workflow at regular intervals. For this use case, <strong>the wait time is set to one hour</strong>.</p> 
  <img alt="" captionBottom="" imageRotate="0" src="assets/uc_monitoring_workflow_attente.png" title="UC_monitoring_workflow_attente.png" /> 
  <h2 id="step-4--preparing-the-delivery">Step 4: Preparing the delivery</h2> 
  <p>The "Delivery" activity is based on a <strong>delivery template</strong> stored in the <strong>Resources &gt; Templates &gt; Delivery templates</strong> node.</p> 
  <p>This template must include:</p> 
  <ul> 
   <li><p><strong>the email address of the supervisor</strong>.</p> </li> 
   <li><p><strong>HTML content</strong> for inserting personalized text.</p> <img alt="" captionBottom="" imageRotate="0" src="assets/uc_monitoring_workflow_variables_diffusion.png" title="UC_monitoring_workflow_variables_diffusion.png" /><p>The three variables declared (WF_Stop, WF_Paused, WF_Error) match the three workflow event variables.</p> <p>These variables must be declared in the <strong>Variables</strong> tab of the delivery template properties.</p> <p> To recover <strong>the content of the workflow event variables</strong>, you need to declare the variables specific to the delivery that will be initialized with values returned by the JavaScript code.</p> <p>The delivery template has the following content:</p> <img alt="" captionBottom="" imageRotate="0" src="assets/uc_monitoring_workflow_model_diffusion.png" title="UC_monitoring_workflow_model_diffusion.png" /></li> 
  </ul> 
  <p>Once the template has been created and approved, you need to configure the <strong>Delivery</strong> activity to:</p> 
  <ul> 
   <li><p>link the "Delivery" activity to the delivery template created previously.</p> </li> 
   <li><p>link the workflow's event variables to those specific to the delivery template.</p> </li> 
  </ul> 
  <p>Double-click the <strong>Delivery</strong> activity and select the following options:</p> 
  <ul> 
   <li><p>Delivery: select <strong>New, created from a template</strong>, and select the delivery template created previously.</p> </li> 
   <li><p>For the <strong>Recipients and Content</strong> fields, select <strong>Specified in the delivery</strong>.</p> </li> 
   <li><p>Action to execute: select <strong>Prepare and start</strong>.</p> </li> 
   <li><p>Uncheck the <strong>Process errors</strong> option.</p> <img alt="" captionBottom="" imageRotate="0" src="assets/uc_monitoring_workflow_optionmodel.png" title="UC_monitoring_workflow_optionmodel.png" /></li> 
   <li><p>Go to the <strong>Script</strong> tab of the <strong>Delivery</strong> activity, add three <strong>character string</strong> type variables via the personalization field menu. </p> <img alt="" captionBottom="" imageRotate="0" src="assets/uc_monitoring_workflow_selectlinkvariables.png" title="UC_monitoring_workflow_selectlinkvariables.png" /><img alt="" captionBottom="" imageRotate="0" src="assets/uc_monitoring_workflow_linkvariables.png" title="UC_monitoring_workflow_linkvariables.png" /><p>The three variables declared are:</p> 
    <codeblock gutter="true" class="syntax html">
      !!discoiqbr!!delivery.variables._var[0].stringValue&amp;nbsp;=&amp;nbsp;vars.strWorkflowError;!!discoiqbr!!delivery.variables._var[1].stringValue&amp;nbsp;=&amp;nbsp;vars.strWorkflowPaused;!!discoiqbr!!delivery.variables._var[2].stringValue&amp;nbsp;=&amp;nbsp;vars.strWorkflowStop;&amp;nbsp;!!discoiqbr!!&amp;nbsp; 
    </codeblock></li> 
  </ul> 
  <p>Once this monitoring workflow is launched, it sends the following summary to the recipient:</p> 
  <img alt="" captionBottom="" imageRotate="0" src="assets/uc_monitoring_workflow_mailfinal.png" title="UC_monitoring_workflow_mailfinal.png" /> 
 </body> 
</html>